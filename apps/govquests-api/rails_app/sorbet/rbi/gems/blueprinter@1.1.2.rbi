# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `blueprinter` gem.
# Please instead update this file by running `bin/tapioca gem blueprinter`.


# @api private
#
# source://blueprinter//lib/blueprinter.rb#3
module Blueprinter
  class << self
    # @api private
    # @return [Configuration]
    #
    # source://blueprinter//lib/blueprinter.rb#13
    def configuration; end

    # @api private
    # @yield [configuration]
    #
    # source://blueprinter//lib/blueprinter.rb#17
    def configure; end

    # Resets global configuration.
    #
    # @api private
    #
    # source://blueprinter//lib/blueprinter.rb#22
    def reset_configuration!; end
  end
end

# @api private
#
# source://blueprinter//lib/blueprinter/association.rb#9
class Blueprinter::Association < ::Blueprinter::Field
  # @api private
  # @param method [Symbol] The method to call on the source object to retrieve the associated data
  # @param name [Symbol] The name of the association as it will appear when rendered
  # @param blueprint [Blueprinter::Base] The blueprint to use for rendering the association
  # @param parent_blueprint [Blueprinter::Base] The blueprint that this association is being defined within
  # @param extractor [Blueprinter::Extractor] The extractor to use when retrieving the associated data
  # @param options [Hash]
  # @param view [Symbol] The view to use in conjunction with the blueprint
  # @return [Blueprinter::Association]
  #
  # source://blueprinter//lib/blueprinter/association.rb#19
  def initialize(method:, name:, blueprint:, view:, parent_blueprint:, extractor: T.unsafe(nil), options: T.unsafe(nil)); end
end

# @api private
#
# source://blueprinter//lib/blueprinter/extractors/association_extractor.rb#8
class Blueprinter::AssociationExtractor < ::Blueprinter::Extractor
  include ::Blueprinter::TypeHelpers
  include ::Blueprinter::EmptyTypes

  # @api private
  # @return [AssociationExtractor] a new instance of AssociationExtractor
  #
  # source://blueprinter//lib/blueprinter/extractors/association_extractor.rb#11
  def initialize; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/association_extractor.rb#15
  def extract(association_name, object, local_options, options = T.unsafe(nil)); end

  private

  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/association_extractor.rb#35
  def association_blueprint(blueprint, value); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/association_extractor.rb#29
  def default_value(association_options); end
end

# @api private
#
# source://blueprinter//lib/blueprinter/extractors/auto_extractor.rb#12
class Blueprinter::AutoExtractor < ::Blueprinter::Extractor
  include ::Blueprinter::TypeHelpers
  include ::Blueprinter::EmptyTypes

  # @api private
  # @return [AutoExtractor] a new instance of AutoExtractor
  #
  # source://blueprinter//lib/blueprinter/extractors/auto_extractor.rb#15
  def initialize; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/auto_extractor.rb#22
  def extract(field_name, object, local_options, options = T.unsafe(nil)); end

  private

  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/auto_extractor.rb#30
  def default_value(field_options); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/auto_extractor.rb#34
  def extractor(object, options); end
end

# source://blueprinter//lib/blueprinter/base.rb#10
class Blueprinter::Base
  include ::Blueprinter::BaseHelpers
  extend ::Blueprinter::TypeHelpers
  extend ::Blueprinter::BaseHelpers::SingletonMethods
  extend ::Blueprinter::Reflection

  class << self
    # Specify an associated object to be included for serialization.
    # Takes a required method and an option.
    #
    # @example Specifying an association
    #   class UserBlueprint < Blueprinter::Base
    #   # code
    #   association :vehicles, view: :extended, blueprint: VehiclesBlueprint
    #   # code
    #   end
    # @example Passing a block to be evaluated as the value.
    #   class UserBlueprint < Blueprinter::Base
    #   association :vehicles, blueprint: VehiclesBlueprint do |user, opts|
    #   user.vehicles + opts[:additional_vehicles]
    #   end
    #   end
    # @option options
    # @option options
    # @option options
    # @param method [Symbol] the association name
    # @param options [Hash] options to overide defaults.
    # @raise [Blueprinter::Errors::InvalidBlueprint] if provided blueprint is not valid
    # @return [Association] An object
    # @yield [object, options] The object and the options passed to render are
    #   also yielded to the block.
    #
    # source://blueprinter//lib/blueprinter/base.rb#151
    def association(method, options = T.unsafe(nil), &block); end

    # Exclude a field that was mixed into the current view.
    #
    # @example Excluding a field from being included into the current view.
    #   view :normal do
    #   fields :position, :company
    #   end
    #   view :special do
    #   include_view :normal
    #   field :birthday
    #   exclude :position
    #   end
    #   #=> [:company, :birthday]
    # @param field_name [Symbol] the field to exclude from the current view.
    # @return [Array<Symbol>] an array of field names
    #
    # source://blueprinter//lib/blueprinter/base.rb#378
    def exclude(field_name); end

    # When mixing multiple views under a single view, some fields may required to be excluded from
    # current view
    #
    # @example Excluding mutiple fields from being included into the current view.
    #   view :normal do
    #   fields :name,:address,:position,
    #   :company, :contact
    #   end
    #   view :special do
    #   include_view :normal
    #   fields :birthday,:joining_anniversary
    #   excludes :position,:address
    #   end
    #   => [:name, :company, :contact, :birthday, :joining_anniversary]
    # @param the [Array<Symbol>] fields to exclude from the current view.
    # @return [Array<Symbol>] an array of field names
    #
    # source://blueprinter//lib/blueprinter/base.rb#401
    def excludes(*field_names); end

    # Specify a field or method name to be included for serialization.
    # Takes a required method and an option.
    #
    # @example Passing a block to be evaluated as the value.
    #   class UserBlueprint < Blueprinter::Base
    #   field :full_name do |object, options|
    #   "options[:title_prefix] #{object.first_name} #{object.last_name}"
    #   end
    #   # other code
    #   end
    # @example Specifying a user's first_name to be serialized.
    #   class UserBlueprint < Blueprinter::Base
    #   field :first_name
    #   # other code
    #   end
    # @example Passing an if proc and unless method.
    #   class UserBlueprint < Blueprinter::Base
    #   def skip_first_name?(_field_name, user, options)
    #   user.first_name == options[:first_name]
    #   end
    #
    #   field :first_name, unless: :skip_first_name?
    #   field :last_name, if: ->(_field_name, user, options) { user.first_name != options[:first_name] }
    #   # other code
    #   end
    # @option options
    # @option options
    # @option options
    # @option options
    # @option options
    # @param method [Symbol] the field or method name you want to include for
    #   serialization.
    # @param options [Hash] options to overide defaults.
    # @return [Field] A Field object
    # @yield [object, options] The object and the options passed to render are
    #   also yielded to the block.
    #
    # source://blueprinter//lib/blueprinter/base.rb#111
    def field(method, options = T.unsafe(nil), &block); end

    # Specify one or more field/method names to be included for serialization.
    # Takes at least one field or method names.
    #
    # @example Specifying a user's first_name and last_name to be serialized.
    #   class UserBlueprint < Blueprinter::Base
    #   fields :first_name, :last_name
    #   # other code
    #   end
    # @param method [Symbol] the field or method name you want to include for
    #   serialization.
    # @return [Array<Symbol>] an array of field names
    #
    # source://blueprinter//lib/blueprinter/base.rb#273
    def fields(*field_names); end

    # Specify a field or method name used as an identifier. Usually, this is
    # something like :id
    #
    # Note: identifiers are always rendered and considered their own view,
    # similar to the :default view.
    #
    # @example Specifying a uuid as an identifier.
    #   class UserBlueprint < Blueprinter::Base
    #   identifier :uuid
    #   # other code
    #   end
    # @example Passing a block to be evaluated as the value.
    #   class UserBlueprint < Blueprinter::Base
    #   identifier :uuid do |user, options|
    #   options[:current_user].anonymize(user.uuid)
    #   end
    #   end
    # @param method [Symbol] the method or field used as an identifier that you
    #   want to set for serialization.
    # @param name [Symbol] to rename the identifier key in the JSON
    #   output. Defaults to method given.
    # @param extractor [AssociationExtractor, AutoExtractor, BlockExtractor, HashExtractor, PublicSendExtractor]
    # @return [Field] A Field object
    # @yield [object, options] The object and the options passed to render are
    #   also yielded to the block.
    #
    #   Kind of extractor to use.
    #   Either define your own or use Blueprinter's premade extractors.
    #   Defaults to AutoExtractor
    #
    # source://blueprinter//lib/blueprinter/base.rb#46
    def identifier(method, name: T.unsafe(nil), extractor: T.unsafe(nil), &block); end

    # Specify another view that should be mixed into the current view.
    #
    # @example Including a normal view into an extended view.
    #   class UserBlueprint < Blueprinter::Base
    #   # other code...
    #   view :normal do
    #   fields :first_name, :last_name
    #   end
    #   view :extended do
    #   include_view :normal # include fields specified from above.
    #   field :description
    #   end
    #   #=> [:first_name, :last_name, :description]
    #   end
    # @param view_name [Symbol] the view to mix into the current view.
    # @return [Array<Symbol>] an array of view names.
    #
    # source://blueprinter//lib/blueprinter/base.rb#332
    def include_view(view_name); end

    # Specify additional views that should be mixed into the current view.
    #
    #  @param view_name [Array<Symbol>] the views to mix into the current view.
    #
    # @example Including the normal and special views into an extended view.
    #   class UserBlueprint < Blueprinter::Base
    #   # other code...
    #   view :normal do
    #   fields :first_name, :last_name
    #   end
    #   view :special do
    #   fields :birthday, :company
    #   end
    #   view :extended do
    #   include_views :normal, :special # include fields specified from above.
    #   field :description
    #   end
    #   #=> [:first_name, :last_name, :birthday, :company, :description]
    #   end
    # @return [Array<Symbol>] an array of view names.
    #
    # source://blueprinter//lib/blueprinter/base.rb#358
    def include_views(*view_names); end

    # This is the magic method that converts complex objects into a simple hash
    # ready for JSON conversion.
    #
    # Note: we accept view (public interface) that is in reality a view_name,
    # so we rename it for clarity
    #
    # @api private
    # @raise [BlueprinterError]
    #
    # source://blueprinter//lib/blueprinter/base.rb#252
    def prepare(object, view_name:, local_options:, root: T.unsafe(nil), meta: T.unsafe(nil)); end

    # Generates a JSON formatted String.
    # Takes a required object and an optional view.
    #
    # @example Generating JSON with an extended view
    #   post = Post.all
    #   Blueprinter::Base.render post, view: :extended
    #   # => "[{\"id\":1,\"title\":\"Hello\"},{\"id\":2,\"title\":\"My Day\"}]"
    # @option options
    # @option options
    # @option options
    # @param object [Object] the Object to serialize upon.
    # @param options [Hash] the options hash which requires a :view. Any
    #   additional key value pairs will be exposed during serialization.
    # @return [String] JSON formatted String
    #
    # source://blueprinter//lib/blueprinter/base.rb#191
    def render(object, options = T.unsafe(nil)); end

    # Generates a hash.
    # Takes a required object and an optional view.
    #
    # @example Generating a hash with an extended view
    #   post = Post.all
    #   Blueprinter::Base.render_as_hash post, view: :extended
    #   # => [{id:1, title: Hello},{id:2, title: My Day}]
    # @option options
    # @option options
    # @option options
    # @param object [Object] the Object to serialize upon.
    # @param options [Hash] the options hash which requires a :view. Any
    #   additional key value pairs will be exposed during serialization.
    # @return [Hash]
    #
    # source://blueprinter//lib/blueprinter/base.rb#216
    def render_as_hash(object, options = T.unsafe(nil)); end

    # Generates a JSONified hash.
    # Takes a required object and an optional view.
    #
    # @example Generating a hash with an extended view
    #   post = Post.all
    #   Blueprinter::Base.render_as_json post, view: :extended
    #   # => [{"id" => "1", "title" => "Hello"},{"id" => "2", "title" => "My Day"}]
    # @option options
    # @option options
    # @option options
    # @param object [Object] the Object to serialize upon.
    # @param options [Hash] the options hash which requires a :view. Any
    #   additional key value pairs will be exposed during serialization.
    # @return [Hash]
    #
    # source://blueprinter//lib/blueprinter/base.rb#241
    def render_as_json(object, options = T.unsafe(nil)); end

    # Specify one transformer to be included for serialization.
    # Takes a class which extends Blueprinter::Transformer
    #
    # @example Specifying a DynamicFieldTransformer transformer for including dynamic fields to be serialized.
    #   class User
    #   def custom_columns
    #   self.dynamic_fields # which is an array of some columns
    #   end
    #
    #   def custom_fields
    #   custom_columns.each_with_object({}) { |col,result| result[col] = self.send(col) }
    #   end
    #   end
    #
    #   class UserBlueprint < Blueprinter::Base
    #   fields :first_name, :last_name
    #   transform DynamicFieldTransformer
    #   # other code
    #   end
    #
    #   class DynamicFieldTransformer < Blueprinter::Transformer
    #   def transform(hash, object, options)
    #   hash.merge!(object.dynamic_fields)
    #   end
    #   end
    # @param class name [Class] which implements the method transform to include for
    #   serialization.
    # @return [Array<Class>] an array of transformers
    #
    # source://blueprinter//lib/blueprinter/base.rb#310
    def transform(transformer); end

    # Specify a view and the fields it should have.
    # It accepts a view name and a block. The block should specify the fields.
    #
    # @example Using views
    #   view :extended do
    #   fields :position, :company
    #   include_view :normal
    #   exclude :first_name
    #   end
    # @param view_name [Symbol] the view name
    # @return [View] a Blueprinter::View object
    # @yieldreturn [#fields, #field, #include_view, #exclude] Use this block to
    #   specify fields, include fields from other views, or exclude fields.
    #
    # source://blueprinter//lib/blueprinter/base.rb#420
    def view(view_name); end

    # Check whether or not a Blueprint supports the supplied view.
    # It accepts a view name.
    #
    # class ExampleBlueprint < Blueprinter::Base
    #  view :custom do
    #  end
    # end
    #
    #  ExampleBlueprint.view?(:custom) => true
    #  ExampleBlueprint.view?(:doesnt_exist) => false
    #
    # supported by this Blueprint.
    #
    # @example With the following Blueprint
    # @param view_name [Symbol] the view name
    # @return [Boolean] a boolean value indicating if the view is
    #
    # source://blueprinter//lib/blueprinter/base.rb#444
    def view?(view_name); end
  end
end

# @api private
#
# source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#7
module Blueprinter::BaseHelpers
  mixes_in_class_methods ::Blueprinter::BaseHelpers::SingletonMethods

  class << self
    # @api private
    # @private
    #
    # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#8
    def included(base); end
  end
end

# @api private
#
# source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#12
module Blueprinter::BaseHelpers::SingletonMethods
  include ::Blueprinter::TypeHelpers

  private

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#99
  def associations(view_name = T.unsafe(nil)); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#91
  def current_view; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#56
  def inherited(subclass); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#87
  def jsonify(blob); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#60
  def object_to_hash(object, view_name:, local_options:); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#35
  def prepare_data(object, view_name, local_options); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#17
  def prepare_for_render(object, options); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#49
  def prepend_root_and_meta(data, root, meta); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#76
  def validate_root_and_meta!(root, meta); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/helpers/base_helpers.rb#95
  def view_collection; end
end

# @api private
#
# source://blueprinter//lib/blueprinter/extractors/block_extractor.rb#7
class Blueprinter::BlockExtractor < ::Blueprinter::Extractor
  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/block_extractor.rb#8
  def extract(_field_name, object, local_options, options = T.unsafe(nil)); end
end

# @api private
#
# source://blueprinter//lib/blueprinter/blueprint_validator.rb#5
class Blueprinter::BlueprintValidator
  class << self
    # Determines whether the provided object is a valid Blueprint.
    #
    # @api private
    # @param blueprint [Object] The object to validate.
    # @raise [Blueprinter::Errors::InvalidBlueprint] if the object is not a valid Blueprint.
    # @return [Boolean] true if object is a valid Blueprint
    #
    # source://blueprinter//lib/blueprinter/blueprint_validator.rb#12
    def validate!(blueprint); end

    private

    # @api private
    # @return [Boolean]
    #
    # source://blueprinter//lib/blueprinter/blueprint_validator.rb#25
    def valid_blueprint?(blueprint); end
  end
end

# source://blueprinter//lib/blueprinter/blueprinter_error.rb#4
class Blueprinter::BlueprinterError < ::StandardError; end

# source://blueprinter//lib/blueprinter/configuration.rb#8
class Blueprinter::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#14
  def initialize; end

  # source://blueprinter//lib/blueprinter/configuration.rb#37
  def array_like_classes; end

  # Returns the value of attribute association_default.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def association_default; end

  # Sets the attribute association_default
  #
  # @param value the value to set the attribute association_default to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def association_default=(_arg0); end

  # Returns the value of attribute custom_array_like_classes.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def custom_array_like_classes; end

  # Sets the attribute custom_array_like_classes
  #
  # @param value the value to set the attribute custom_array_like_classes to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def custom_array_like_classes=(_arg0); end

  # Returns the value of attribute datetime_format.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def datetime_format; end

  # Sets the attribute datetime_format
  #
  # @param value the value to set the attribute datetime_format to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def datetime_format=(_arg0); end

  # Returns the value of attribute default_transformers.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def default_transformers; end

  # Sets the attribute default_transformers
  #
  # @param value the value to set the attribute default_transformers to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def default_transformers=(_arg0); end

  # Returns the value of attribute deprecations.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def deprecations; end

  # Sets the attribute deprecations
  #
  # @param value the value to set the attribute deprecations to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def deprecations=(_arg0); end

  # source://blueprinter//lib/blueprinter/configuration.rb#29
  def extensions; end

  # source://blueprinter//lib/blueprinter/configuration.rb#33
  def extensions=(list); end

  # Returns the value of attribute extractor_default.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def extractor_default; end

  # Sets the attribute extractor_default
  #
  # @param value the value to set the attribute extractor_default to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def extractor_default=(_arg0); end

  # Returns the value of attribute field_default.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def field_default; end

  # Sets the attribute field_default
  #
  # @param value the value to set the attribute field_default to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def field_default=(_arg0); end

  # Returns the value of attribute generator.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def generator; end

  # Sets the attribute generator
  #
  # @param value the value to set the attribute generator to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def generator=(_arg0); end

  # Returns the value of attribute if.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def if; end

  # Sets the attribute if
  #
  # @param value the value to set the attribute if to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def if=(_arg0); end

  # source://blueprinter//lib/blueprinter/configuration.rb#45
  def jsonify(blob); end

  # Returns the value of attribute method.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def method; end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def method=(_arg0); end

  # Returns the value of attribute sort_fields_by.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def sort_fields_by; end

  # Sets the attribute sort_fields_by
  #
  # @param value the value to set the attribute sort_fields_by to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def sort_fields_by=(_arg0); end

  # Returns the value of attribute unless.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def unless; end

  # Sets the attribute unless
  #
  # @param value the value to set the attribute unless to.
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#9
  def unless=(_arg0); end

  # @return [Boolean]
  #
  # source://blueprinter//lib/blueprinter/configuration.rb#49
  def valid_callable?(callable_name); end
end

# source://blueprinter//lib/blueprinter/configuration.rb#12
Blueprinter::Configuration::VALID_CALLABLES = T.let(T.unsafe(nil), Array)

# @api private
#
# source://blueprinter//lib/blueprinter/formatters/date_time_formatter.rb#4
class Blueprinter::DateTimeFormatter
  # @api private
  #
  # source://blueprinter//lib/blueprinter/formatters/date_time_formatter.rb#7
  def format(value, options); end

  private

  # @api private
  #
  # source://blueprinter//lib/blueprinter/formatters/date_time_formatter.rb#21
  def format_datetime(value, field_format); end
end

# @api private
#
# source://blueprinter//lib/blueprinter/formatters/date_time_formatter.rb#5
class Blueprinter::DateTimeFormatter::InvalidDateTimeFormatterError < ::Blueprinter::BlueprinterError; end

# @api private
#
# source://blueprinter//lib/blueprinter/view.rb#5
class Blueprinter::DefinitionPlaceholder < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute view?
  #
  # @return [Object] the current value of view?
  def view?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# @api private
#
# source://blueprinter//lib/blueprinter/empty_types.rb#6
Blueprinter::EMPTY_COLLECTION = T.let(T.unsafe(nil), String)

# @api private
#
# source://blueprinter//lib/blueprinter/empty_types.rb#7
Blueprinter::EMPTY_HASH = T.let(T.unsafe(nil), String)

# @api private
#
# source://blueprinter//lib/blueprinter/empty_types.rb#8
Blueprinter::EMPTY_STRING = T.let(T.unsafe(nil), String)

# @api private
#
# source://blueprinter//lib/blueprinter/empty_types.rb#10
module Blueprinter::EmptyTypes
  include ::Blueprinter::TypeHelpers

  private

  # @api private
  # @return [Boolean]
  #
  # source://blueprinter//lib/blueprinter/empty_types.rb#15
  def use_default_value?(value, empty_type); end
end

# @api private
#
# source://blueprinter//lib/blueprinter/errors.rb#4
module Blueprinter::Errors; end

# @api private
#
# source://blueprinter//lib/blueprinter/errors/invalid_blueprint.rb#5
class Blueprinter::Errors::InvalidBlueprint < ::Blueprinter::BlueprinterError; end

# Base class for all extensions. All extension methods are implemented as no-ops.
#
# @api private
#
# source://blueprinter//lib/blueprinter/extension.rb#7
class Blueprinter::Extension
  # Called eary during "render", this method receives the object to be rendered and
  # may return a modified (or new) object to be rendered.
  #
  # @api private
  # @param object [Object] The object to be rendered
  # @param _blueprint [Class] The Blueprinter class
  # @param _view [Symbol] The blueprint view
  # @param _options [Hash] Options passed to "render"
  # @return [Object] The object to continue rendering
  #
  # source://blueprinter//lib/blueprinter/extension.rb#18
  def pre_render(object, _blueprint, _view, _options); end
end

# Stores and runs Blueprinter extensions. An extension is any object that implements one or more of the
# extension methods:
#
# The Render Extension intercepts an object before rendering begins. The return value from this
# method is what is ultimately rendered.
#
#   def pre_render(object, blueprint, view, options)
#     # returns original, modified, or new object
#   end
#
# @api private
#
# source://blueprinter//lib/blueprinter/extensions.rb#15
class Blueprinter::Extensions
  # @api private
  # @return [Extensions] a new instance of Extensions
  #
  # source://blueprinter//lib/blueprinter/extensions.rb#16
  def initialize(extensions = T.unsafe(nil)); end

  # Appends an extension
  #
  # @api private
  #
  # source://blueprinter//lib/blueprinter/extensions.rb#25
  def <<(ext); end

  # Runs the object through all Render Extensions and returns the final result
  #
  # @api private
  #
  # source://blueprinter//lib/blueprinter/extensions.rb#31
  def pre_render(object, blueprint, view, options = T.unsafe(nil)); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/extensions.rb#20
  def to_a; end
end

# @api private
#
# source://blueprinter//lib/blueprinter/extractor.rb#4
class Blueprinter::Extractor
  # @api private
  # @raise [NotImplementedError]
  #
  # source://blueprinter//lib/blueprinter/extractor.rb#5
  def extract(_field_name, _object, _local_options, _options = T.unsafe(nil)); end

  class << self
    # @api private
    #
    # source://blueprinter//lib/blueprinter/extractor.rb#9
    def extract(field_name, object, local_options, options = T.unsafe(nil)); end
  end
end

# @api private
#
# source://blueprinter//lib/blueprinter/field.rb#5
class Blueprinter::Field
  # @api private
  # @return [Field] a new instance of Field
  #
  # source://blueprinter//lib/blueprinter/field.rb#8
  def initialize(method, name, extractor, blueprint, options = T.unsafe(nil)); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#6
  def blueprint; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#16
  def extract(object, local_options); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#6
  def extractor; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#6
  def method; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#6
  def name; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#6
  def options; end

  # @api private
  # @return [Boolean]
  #
  # source://blueprinter//lib/blueprinter/field.rb#20
  def skip?(field_name, object, local_options); end

  private

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#40
  def callable_from(condition); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#28
  def if_callable; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/field.rb#34
  def unless_callable; end
end

# @api private
#
# source://blueprinter//lib/blueprinter/extractors/hash_extractor.rb#7
class Blueprinter::HashExtractor < ::Blueprinter::Extractor
  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/hash_extractor.rb#8
  def extract(field_name, object, _local_options, _options = T.unsafe(nil)); end
end

# @api private
#
# source://blueprinter//lib/blueprinter/extractors/public_send_extractor.rb#7
class Blueprinter::PublicSendExtractor < ::Blueprinter::Extractor
  # @api private
  #
  # source://blueprinter//lib/blueprinter/extractors/public_send_extractor.rb#8
  def extract(field_name, object, _local_options, _options = T.unsafe(nil)); end
end

# Public methods for reflecting on a Blueprint.
#
# @api private
#
# source://blueprinter//lib/blueprinter/reflection.rb#7
module Blueprinter::Reflection
  # Returns a Hash of views keyed by name.
  #
  # Example:
  #
  #   widget_view = WidgetBlueprint.reflections[:default]
  #   category = widget_view.associations[:category]
  #   category.blueprint
  #   => CategoryBlueprint
  #   category.view
  #   => :default
  #
  # @api private
  # @return [Hash<Symbol, Blueprinter::Reflection::View>]
  #
  # source://blueprinter//lib/blueprinter/reflection.rb#25
  def reflections; end
end

# @api private
#
# source://blueprinter//lib/blueprinter/reflection.rb#9
class Blueprinter::Reflection::Association < ::Struct
  # Returns the value of attribute blueprint
  #
  # @return [Object] the current value of blueprint
  def blueprint; end

  # Sets the attribute blueprint
  #
  # @param value [Object] the value to set the attribute blueprint to.
  # @return [Object] the newly set value
  def blueprint=(_); end

  # Returns the value of attribute display_name
  #
  # @return [Object] the current value of display_name
  def display_name; end

  # Sets the attribute display_name
  #
  # @param value [Object] the value to set the attribute display_name to.
  # @return [Object] the newly set value
  def display_name=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute options
  #
  # @return [Object] the current value of options
  def options; end

  # Sets the attribute options
  #
  # @param value [Object] the value to set the attribute options to.
  # @return [Object] the newly set value
  def options=(_); end

  # Returns the value of attribute view
  #
  # @return [Object] the current value of view
  def view; end

  # Sets the attribute view
  #
  # @param value [Object] the value to set the attribute view to.
  # @return [Object] the newly set value
  def view=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# @api private
#
# source://blueprinter//lib/blueprinter/reflection.rb#8
class Blueprinter::Reflection::Field < ::Struct
  # Returns the value of attribute display_name
  #
  # @return [Object] the current value of display_name
  def display_name; end

  # Sets the attribute display_name
  #
  # @param value [Object] the value to set the attribute display_name to.
  # @return [Object] the newly set value
  def display_name=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute options
  #
  # @return [Object] the current value of options
  def options; end

  # Sets the attribute options
  #
  # @param value [Object] the value to set the attribute options to.
  # @return [Object] the newly set value
  def options=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Represents a view within a Blueprint.
#
# @api private
#
# source://blueprinter//lib/blueprinter/reflection.rb#34
class Blueprinter::Reflection::View
  # @api private
  # @return [View] a new instance of View
  #
  # source://blueprinter//lib/blueprinter/reflection.rb#37
  def initialize(name, view_collection); end

  # Returns a Hash of associations in this view (recursive) keyed by method name.
  #
  # @api private
  # @return [Hash<Symbol, Blueprinter::Reflection::Association>]
  #
  # source://blueprinter//lib/blueprinter/reflection.rb#60
  def associations; end

  # Returns a Hash of fields in this view (recursive) keyed by method name.
  #
  # @api private
  # @return [Hash<Symbol, Blueprinter::Reflection::Field>]
  #
  # source://blueprinter//lib/blueprinter/reflection.rb#47
  def fields; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/reflection.rb#35
  def name; end
end

# @api private
#
# source://blueprinter//lib/blueprinter/transformer.rb#5
class Blueprinter::Transformer
  # @api private
  # @raise [NotImplementedError]
  #
  # source://blueprinter//lib/blueprinter/transformer.rb#6
  def transform(_result_hash, _primary_obj, _options = T.unsafe(nil)); end

  class << self
    # @api private
    #
    # source://blueprinter//lib/blueprinter/transformer.rb#10
    def transform(result_hash, primary_obj, options = T.unsafe(nil)); end
  end
end

# @api private
#
# source://blueprinter//lib/blueprinter/helpers/type_helpers.rb#4
module Blueprinter::TypeHelpers
  private

  # @api private
  # @return [Boolean]
  #
  # source://blueprinter//lib/blueprinter/helpers/type_helpers.rb#7
  def array_like?(object); end
end

# @api private
#
# source://blueprinter//lib/blueprinter/view.rb#6
class Blueprinter::View
  # @api private
  # @return [View] a new instance of View
  #
  # source://blueprinter//lib/blueprinter/view.rb#9
  def initialize(name, fields: T.unsafe(nil), included_view_names: T.unsafe(nil), excluded_view_names: T.unsafe(nil), transformers: T.unsafe(nil)); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#69
  def <<(field); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#65
  def add_transformer(custom_transformer); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#7
  def definition_order; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#55
  def exclude_field(field_name); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#59
  def exclude_fields(field_names); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#7
  def excluded_field_names; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#7
  def fields; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#43
  def include_view(view_name); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#48
  def include_views(view_names); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#7
  def included_view_names; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#25
  def inherit(view); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#7
  def name; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#19
  def track_definition_order(method, viewable: T.unsafe(nil)); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view.rb#7
  def view_transformers; end
end

# @api private
#
# source://blueprinter//lib/blueprinter/view_collection.rb#7
class Blueprinter::ViewCollection
  # @api private
  # @return [ViewCollection] a new instance of ViewCollection
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#10
  def initialize; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#45
  def [](view_name); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#28
  def fields_for(view_name); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#18
  def inherit(view_collection); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#8
  def sort_by_definition; end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#39
  def transformers(view_name); end

  # @api private
  # @return [Boolean]
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#24
  def view?(view_name); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#8
  def views; end

  private

  # view_name_filter allows to follow definition order all the way down starting from the view_name given to sort_by_def()
  # but include no others at the top-level
  #
  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#85
  def add_to_ordered_fields(ordered_fields, definition, fields, view_name_filter = T.unsafe(nil)); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#97
  def gather_transformers_from_included_views(view_name); end

  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#51
  def identifier_fields; end

  # select and order members of fields according to traversal of the definition_orders
  #
  # @api private
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#75
  def sort_by_def(view_name, fields); end

  # @api private
  # @param view_name [String]
  # @return [Array<(Hash, Hash<String, NilClass>)>] fields, excluded_fields
  #
  # source://blueprinter//lib/blueprinter/view_collection.rb#57
  def sortable_fields(view_name); end
end
