# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pry-remote` gem.
# Please instead update this file by running `bin/tapioca gem pry-remote`.


# source://pry-remote//lib/pry-remote.rb#313
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  # Starts a remote Pry session
  # a handy alias as many people may think the method is named after the gem
  # (pry-remote)
  #
  # @param host [String] Host of the server
  # @param port [Integer] Port of the server
  # @param options [Hash] Options to be passed to Pry.start
  #
  # source://pry-remote//lib/pry-remote.rb#319
  def pry_remote(host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end

  # Starts a remote Pry session
  #
  # @param host [String] Host of the server
  # @param port [Integer] Port of the server
  # @param options [Hash] Options to be passed to Pry.start
  #
  # source://pry-remote//lib/pry-remote.rb#319
  def remote_pry(host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end
end

# source://pry-remote//lib/pry-remote.rb#7
module PryRemote; end

# Parses arguments and allows to start the client.
#
# source://pry-remote//lib/pry-remote.rb#233
class PryRemote::CLI
  # @return [CLI] a new instance of CLI
  #
  # source://pry-remote//lib/pry-remote.rb#234
  def initialize(args = T.unsafe(nil)); end

  # Returns the value of attribute capture.
  #
  # source://pry-remote//lib/pry-remote.rb#272
  def capture; end

  # Returns the value of attribute capture.
  #
  # source://pry-remote//lib/pry-remote.rb#272
  def capture?; end

  # @return [String] Host of the server
  #
  # source://pry-remote//lib/pry-remote.rb#261
  def host; end

  # @return [Integer] Port of the server
  #
  # source://pry-remote//lib/pry-remote.rb#264
  def port; end

  # Connects to the server
  #
  # @param input [IO] Object holding input for pry-remote
  # @param output [IO] Object pry-debug will send its output to
  #
  # source://pry-remote//lib/pry-remote.rb#280
  def run(input = T.unsafe(nil), output = T.unsafe(nil)); end

  # @return [String] URI for DRb
  #
  # source://pry-remote//lib/pry-remote.rb#267
  def uri; end

  # Returns the value of attribute wait.
  #
  # source://pry-remote//lib/pry-remote.rb#271
  def wait; end

  # Returns the value of attribute wait.
  #
  # source://pry-remote//lib/pry-remote.rb#271
  def wait?; end
end

# A client is used to retrieve information from the client program.
#
# source://pry-remote//lib/pry-remote.rb#119
class PryRemote::Client < ::Struct
  # Returns the value of attribute input
  #
  # @return [Object] the current value of input
  def input; end

  # Sets the attribute input
  #
  # @param value [Object] the value to set the attribute input to.
  # @return [Object] the newly set value
  def input=(_); end

  # @return [InputProxy] Proxy for the input
  #
  # source://pry-remote//lib/pry-remote.rb#131
  def input_proxy; end

  # Tells the client the session is terminated
  #
  # source://pry-remote//lib/pry-remote.rb#126
  def kill; end

  # Returns the value of attribute output
  #
  # @return [Object] the current value of output
  def output; end

  # Sets the attribute output
  #
  # @param value [Object] the value to set the attribute output to.
  # @return [Object] the newly set value
  def output=(_); end

  # Returns the value of attribute stderr
  #
  # @return [Object] the current value of stderr
  def stderr; end

  # Sets the attribute stderr
  #
  # @param value [Object] the value to set the attribute stderr to.
  # @return [Object] the newly set value
  def stderr=(_); end

  # Returns the value of attribute stdout
  #
  # @return [Object] the current value of stdout
  def stdout; end

  # Sets the attribute stdout
  #
  # @param value [Object] the value to set the attribute stdout to.
  # @return [Object] the newly set value
  def stdout=(_); end

  # Returns the value of attribute thread
  #
  # @return [Object] the current value of thread
  def thread; end

  # Sets the attribute thread
  #
  # @param value [Object] the value to set the attribute thread to.
  # @return [Object] the newly set value
  def thread=(_); end

  # Waits until both an input and output are set
  #
  # source://pry-remote//lib/pry-remote.rb#121
  def wait; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://pry-remote//lib/pry-remote.rb#8
PryRemote::DefaultHost = T.let(T.unsafe(nil), String)

# source://pry-remote//lib/pry-remote.rb#9
PryRemote::DefaultPort = T.let(T.unsafe(nil), Integer)

# Class used to wrap inputs so that they can be sent through DRb.
#
# This is to ensure the input is used locally and not reconstructed on the
# server by DRb.
#
# source://pry-remote//lib/pry-remote.rb#39
class PryRemote::IOUndumpedProxy
  include ::DRb::DRbUndumped

  # @return [IOUndumpedProxy] a new instance of IOUndumpedProxy
  #
  # source://pry-remote//lib/pry-remote.rb#42
  def initialize(obj); end

  # source://pry-remote//lib/pry-remote.rb#83
  def <<(data); end

  # source://pry-remote//lib/pry-remote.rb#52
  def completion_proc; end

  # source://pry-remote//lib/pry-remote.rb#46
  def completion_proc=(val); end

  # source://pry-remote//lib/pry-remote.rb#71
  def print(*objs); end

  # source://pry-remote//lib/pry-remote.rb#75
  def printf(*args); end

  # source://pry-remote//lib/pry-remote.rb#67
  def puts(*lines); end

  # source://pry-remote//lib/pry-remote.rb#56
  def readline(prompt); end

  # Some versions of Pry expect $stdout or its output objects to respond to
  # this message.
  #
  # @return [Boolean]
  #
  # source://pry-remote//lib/pry-remote.rb#90
  def tty?; end

  # source://pry-remote//lib/pry-remote.rb#79
  def write(data); end
end

# A class to represent an input object created from DRb. This is used because
# Pry checks for arity to know if a prompt should be passed to the object.
#
# @attr input [#readline] Object to proxy
#
# source://pry-remote//lib/pry-remote.rb#15
class PryRemote::InputProxy < ::Struct
  # source://pry-remote//lib/pry-remote.rb#24
  def completion_proc=(val); end

  # Object to proxy
  #
  # @return [#readline] the current value of input
  def input; end

  # Object to proxy
  #
  # @param value [#readline] the value to set the attribute input to.
  # @return [#readline] the newly set value
  def input=(_); end

  # Reads a line from the input
  #
  # source://pry-remote//lib/pry-remote.rb#17
  def readline(prompt); end

  # source://pry-remote//lib/pry-remote.rb#28
  def readline_arity; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://pry-remote//lib/pry-remote.rb#136
class PryRemote::Server
  # @return [Server] a new instance of Server
  #
  # source://pry-remote//lib/pry-remote.rb#141
  def initialize(object, host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [PryServer::Client] Client connecting to the pry-remote server
  #
  # source://pry-remote//lib/pry-remote.rb#218
  def client; end

  # @return [String] Host of the server
  #
  # source://pry-remote//lib/pry-remote.rb#221
  def host; end

  # @return Object to enter into
  #
  # source://pry-remote//lib/pry-remote.rb#215
  def object; end

  # @return [Integer] Port of the server
  #
  # source://pry-remote//lib/pry-remote.rb#224
  def port; end

  # Actually runs pry-remote
  #
  # source://pry-remote//lib/pry-remote.rb#206
  def run; end

  # Code that has to be called for Pry-remote to work properly
  #
  # source://pry-remote//lib/pry-remote.rb#158
  def setup; end

  # Code that has to be called after setup to return to the initial state
  #
  # source://pry-remote//lib/pry-remote.rb#182
  def teardown; end

  # @return [String] URI for DRb
  #
  # source://pry-remote//lib/pry-remote.rb#227
  def uri; end

  class << self
    # source://pry-remote//lib/pry-remote.rb#137
    def run(object, host = T.unsafe(nil), port = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# Ensure that system (shell command) output is redirected for remote session.
#
# source://pry-remote//lib/pry-remote.rb#96
PryRemote::System = T.let(T.unsafe(nil), Proc)
