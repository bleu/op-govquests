# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `siwe` gem.
# Please instead update this file by running `bin/tapioca gem siwe`.


# source://siwe//lib/siwe/message.rb#7
DOMAIN = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#12
RFC3986 = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#10
SIWE_ADDRESS = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#15
SIWE_CHAIN_ID = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#17
SIWE_DATETIME = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#8
SIWE_DOMAIN = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#19
SIWE_EXPIRATION_TIME = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#18
SIWE_ISSUED_AT = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#24
SIWE_MESSAGE = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#16
SIWE_NONCE = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#20
SIWE_NOT_BEFORE = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#21
SIWE_REQUEST_ID = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#22
SIWE_RESOURCES = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#11
SIWE_STATEMENT = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#13
SIWE_URI_LINE = T.let(T.unsafe(nil), Regexp)

# source://siwe//lib/siwe/message.rb#14
SIWE_VERSION = T.let(T.unsafe(nil), Regexp)

# Main module of siwe
#
# source://siwe//lib/siwe/version.rb#3
module Siwe; end

# Used when the domain doesn't match the domain provided for verification.
#
# source://siwe//lib/siwe/exceptions.rb#19
class Siwe::DomainMismatch < ::StandardError
  # @return [DomainMismatch] a new instance of DomainMismatch
  #
  # source://siwe//lib/siwe/exceptions.rb#20
  def initialize(msg = T.unsafe(nil)); end
end

# source://siwe//lib/siwe.rb#22
class Siwe::Error < ::StandardError; end

# Used when the message is already expired. (Expires At < Time.now)
#
# source://siwe//lib/siwe/exceptions.rb#5
class Siwe::ExpiredMessage < ::StandardError
  # @return [ExpiredMessage] a new instance of ExpiredMessage
  #
  # source://siwe//lib/siwe/exceptions.rb#6
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the address does not conform to EIP-55 or is invalid.
#
# source://siwe//lib/siwe/exceptions.rb#33
class Siwe::InvalidAddress < ::StandardError
  # @return [InvalidAddress] a new instance of InvalidAddress
  #
  # source://siwe//lib/siwe/exceptions.rb#34
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the domain is not a valid authority or is empty.
#
# source://siwe//lib/siwe/exceptions.rb#12
class Siwe::InvalidDomain < ::StandardError
  # @return [InvalidDomain] a new instance of InvalidDomain
  #
  # source://siwe//lib/siwe/exceptions.rb#13
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the message version is not 1.
#
# source://siwe//lib/siwe/exceptions.rb#68
class Siwe::InvalidMessageVersion < ::StandardError
  # @return [InvalidMessageVersion] a new instance of InvalidMessageVersion
  #
  # source://siwe//lib/siwe/exceptions.rb#69
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the nonce is smaller then 8 characters or is not alphanumeric
#
# source://siwe//lib/siwe/exceptions.rb#47
class Siwe::InvalidNonce < ::StandardError
  # @return [InvalidNonce] a new instance of InvalidNonce
  #
  # source://siwe//lib/siwe/exceptions.rb#48
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the signature doesn't correspond to the address of the message.
#
# source://siwe//lib/siwe/exceptions.rb#75
class Siwe::InvalidSignature < ::StandardError
  # @return [InvalidSignature] a new instance of InvalidSignature
  #
  # source://siwe//lib/siwe/exceptions.rb#76
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the message contains a time format not compliant to ISO8601.
#
# source://siwe//lib/siwe/exceptions.rb#61
class Siwe::InvalidTimeFormat < ::StandardError
  # @return [InvalidTimeFormat] a new instance of InvalidTimeFormat
  #
  # source://siwe//lib/siwe/exceptions.rb#62
  def initialize(field, msg = T.unsafe(nil)); end
end

# Used when the message is created with an invalid URI
#
# source://siwe//lib/siwe/exceptions.rb#40
class Siwe::InvalidURI < ::StandardError
  # @return [InvalidURI] a new instance of InvalidURI
  #
  # source://siwe//lib/siwe/exceptions.rb#41
  def initialize(msg = T.unsafe(nil)); end
end

# Class that defines the EIP-4361 message fields and some utility methods to
# generate/validate the messages
#
# source://siwe//lib/siwe/message.rb#31
class Siwe::Message
  # @return [Message] a new instance of Message
  #
  # source://siwe//lib/siwe/message.rb#78
  def initialize(domain, address, uri, version, options = T.unsafe(nil)); end

  # Ethereum address performing the signing conformant to capitalization
  # encoded checksum specified in EIP-55 where applicable.
  #
  # source://siwe//lib/siwe/message.rb#37
  def address; end

  # Ethereum address performing the signing conformant to capitalization
  # encoded checksum specified in EIP-55 where applicable.
  #
  # source://siwe//lib/siwe/message.rb#37
  def address=(_arg0); end

  # EIP-155 Chain ID to which the session is bound, and the network where
  # Contract Accounts must be resolved.
  #
  # source://siwe//lib/siwe/message.rb#48
  def chain_id; end

  # EIP-155 Chain ID to which the session is bound, and the network where
  # Contract Accounts must be resolved.
  #
  # source://siwe//lib/siwe/message.rb#48
  def chain_id=(_arg0); end

  # RFC 4501 dns authority that is requesting the signing.
  #
  # source://siwe//lib/siwe/message.rb#33
  def domain; end

  # RFC 4501 dns authority that is requesting the signing.
  #
  # source://siwe//lib/siwe/message.rb#33
  def domain=(_arg0); end

  # ISO 8601 datetime string that, if present, indicates when the signed
  # authentication message is no longer valid.
  #
  # source://siwe//lib/siwe/message.rb#63
  def expiration_time; end

  # ISO 8601 datetime string that, if present, indicates when the signed
  # authentication message is no longer valid.
  #
  # source://siwe//lib/siwe/message.rb#63
  def expiration_time=(_arg0); end

  # ISO 8601 datetime string of the current time.
  #
  # source://siwe//lib/siwe/message.rb#55
  def issued_at; end

  # ISO 8601 datetime string of the current time.
  #
  # source://siwe//lib/siwe/message.rb#55
  def issued_at=(_arg0); end

  # Randomized token used to prevent replay attacks, at least 8 alphanumeric
  # characters.
  #
  # source://siwe//lib/siwe/message.rb#52
  def nonce; end

  # Randomized token used to prevent replay attacks, at least 8 alphanumeric
  # characters.
  #
  # source://siwe//lib/siwe/message.rb#52
  def nonce=(_arg0); end

  # ISO 8601 datetime string that, if present, indicates when the signed
  # authentication message will become valid.
  #
  # source://siwe//lib/siwe/message.rb#67
  def not_before; end

  # ISO 8601 datetime string that, if present, indicates when the signed
  # authentication message will become valid.
  #
  # source://siwe//lib/siwe/message.rb#67
  def not_before=(_arg0); end

  # source://siwe//lib/siwe/message.rb#222
  def prepare_message; end

  # System-specific identifier that may be used to uniquely refer to the
  # sign-in request.
  #
  # source://siwe//lib/siwe/message.rb#71
  def request_id; end

  # System-specific identifier that may be used to uniquely refer to the
  # sign-in request.
  #
  # source://siwe//lib/siwe/message.rb#71
  def request_id=(_arg0); end

  # List of information or references to information the user wishes to have
  # resolved as part of authentication by the relying party. They are
  # expressed as RFC 3986 URIs separated by `\n- `.
  #
  # source://siwe//lib/siwe/message.rb#76
  def resources; end

  # List of information or references to information the user wishes to have
  # resolved as part of authentication by the relying party. They are
  # expressed as RFC 3986 URIs separated by `\n- `.
  #
  # source://siwe//lib/siwe/message.rb#76
  def resources=(_arg0); end

  # Human-readable ASCII assertion that the user will sign, and it must not
  # contain `\n`.
  #
  # source://siwe//lib/siwe/message.rb#59
  def statement; end

  # Human-readable ASCII assertion that the user will sign, and it must not
  # contain `\n`.
  #
  # source://siwe//lib/siwe/message.rb#59
  def statement=(_arg0); end

  # source://siwe//lib/siwe/message.rb#117
  def to_json_string; end

  # RFC 3986 URI referring to the resource that is the subject of the signing
  # (as in the __subject__ of a claim).
  #
  # source://siwe//lib/siwe/message.rb#41
  def uri; end

  # RFC 3986 URI referring to the resource that is the subject of the signing
  # (as in the __subject__ of a claim).
  #
  # source://siwe//lib/siwe/message.rb#41
  def uri=(_arg0); end

  # @raise [Siwe::InvalidDomain]
  #
  # source://siwe//lib/siwe/message.rb#154
  def validate; end

  # @raise [Siwe::DomainMismatch]
  #
  # source://siwe//lib/siwe/message.rb#195
  def verify(signature, domain, time, nonce); end

  # Current version of the message.
  #
  # source://siwe//lib/siwe/message.rb#44
  def version; end

  # Current version of the message.
  #
  # source://siwe//lib/siwe/message.rb#44
  def version=(_arg0); end

  class << self
    # source://siwe//lib/siwe/message.rb#135
    def from_json_string(str); end

    # @raise [Siwe::UnableToParseMessage]
    #
    # source://siwe//lib/siwe/message.rb#94
    def from_message(msg); end
  end
end

# Used when the nonce doesn't match the nonce provided for verification.
#
# source://siwe//lib/siwe/exceptions.rb#26
class Siwe::NonceMismatch < ::StandardError
  # @return [NonceMismatch] a new instance of NonceMismatch
  #
  # source://siwe//lib/siwe/exceptions.rb#27
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the message is not yet valid. (Not Before > Time.now)
#
# source://siwe//lib/siwe/exceptions.rb#54
class Siwe::NotValidMessage < ::StandardError
  # @return [NotValidMessage] a new instance of NotValidMessage
  #
  # source://siwe//lib/siwe/exceptions.rb#55
  def initialize(msg = T.unsafe(nil)); end
end

# Used when the message doesn't match the RegExp.
#
# source://siwe//lib/siwe/exceptions.rb#82
class Siwe::UnableToParseMessage < ::StandardError
  # @return [UnableToParseMessage] a new instance of UnableToParseMessage
  #
  # source://siwe//lib/siwe/exceptions.rb#83
  def initialize(msg = T.unsafe(nil)); end
end

# Utilities functions for the Siwe library
#
# source://siwe//lib/siwe/util.rb#7
module Siwe::Util
  private

  # source://siwe//lib/siwe/util.rb#10
  def generate_nonce; end

  class << self
    # source://siwe//lib/siwe/util.rb#10
    def generate_nonce; end
  end
end

# source://siwe//lib/siwe/version.rb#4
Siwe::VERSION = T.let(T.unsafe(nil), String)
