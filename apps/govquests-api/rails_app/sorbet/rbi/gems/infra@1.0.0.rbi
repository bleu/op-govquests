# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `infra` gem.
# Please instead update this file by running `bin/tapioca gem infra`.


# source://infra//lib/infra/command.rb#1
module Infra; end

# source://infra//lib/infra/aggregate_root_repository.rb#5
class Infra::AggregateRootRepository
  # @return [AggregateRootRepository] a new instance of AggregateRootRepository
  #
  # source://infra//lib/infra/aggregate_root_repository.rb#6
  def initialize(event_store, notifications = T.unsafe(nil)); end

  # source://infra//lib/infra/aggregate_root_repository.rb#22
  def stream_name(aggregate_class, aggregate_id); end

  # source://infra//lib/infra/aggregate_root_repository.rb#14
  def with_aggregate(aggregate_class, aggregate_id, &_arg2); end
end

# source://infra//lib/infra/command.rb#2
class Infra::Command < ::Dry::Struct
  extend ::Dry::Core::DescendantsTracker

  class << self
    # source://infra//lib/infra/command.rb#5
    def new(*_arg0); end
  end
end

# source://infra//lib/infra/command.rb#3
class Infra::Command::Invalid < ::StandardError; end

# source://infra//lib/infra/command_bus.rb#2
Infra::CommandBus = Arkency::CommandBus

# source://infra//lib/infra/event.rb#4
class Infra::Event < ::RubyEventStore::Event
  include ::Infra::Event::WithSchema
  include ::Infra::Event::WithSchema::Constructor
  extend ::Infra::Event::WithSchema::ClassMethods
end

# source://infra//lib/infra/event.rb#5
module Infra::Event::WithSchema
  include ::Infra::Event::WithSchema::Constructor

  mixes_in_class_methods ::Infra::Event::WithSchema::ClassMethods

  class << self
    # @private
    #
    # source://infra//lib/infra/event.rb#25
    def included(klass); end
  end
end

# source://infra//lib/infra/event.rb#10
module Infra::Event::WithSchema::ClassMethods
  extend ::Forwardable

  # source://forwardable/1.3.3/forwardable.rb#231
  def attribute(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def attribute?(*args, **_arg1, &block); end

  # source://infra//lib/infra/event.rb#14
  def schema; end
end

# source://infra//lib/infra/event.rb#19
module Infra::Event::WithSchema::Constructor
  # source://infra//lib/infra/event.rb#20
  def initialize(event_id: T.unsafe(nil), metadata: T.unsafe(nil), data: T.unsafe(nil)); end
end

# source://infra//lib/infra/event.rb#6
class Infra::Event::WithSchema::Schema < ::Dry::Struct
  extend ::Dry::Core::DescendantsTracker
end

# source://infra//lib/infra/event_store.rb#2
class Infra::EventStore < ::SimpleDelegator
  # source://infra//lib/infra/event_store.rb#27
  def link_event_to_stream(event, stream, expected_version: T.unsafe(nil)); end

  # source://infra//lib/infra/event_store.rb#23
  def subscribe(subscriber, to:); end

  class << self
    # source://infra//lib/infra/event_store.rb#7
    def in_memory; end

    # source://infra//lib/infra/event_store.rb#15
    def in_memory_rails; end

    # source://infra//lib/infra/event_store.rb#3
    def main; end
  end
end

# source://infra//lib/infra/testing.rb#64
class Infra::InMemoryTest < ::Minitest::Test
  include ::Infra::TestPlumbing
  include ::Infra::TestPlumbing::TestMethods
end

# source://infra//lib/infra/process.rb#2
class Infra::Process
  # @return [Process] a new instance of Process
  #
  # source://infra//lib/infra/process.rb#3
  def initialize(event_store, command_bus); end

  # source://infra//lib/infra/process.rb#8
  def call(event_name, event_data_keys, command, command_data_keys); end
end

# source://infra//lib/infra/testing.rb#2
module Infra::TestPlumbing
  class << self
    # @private
    #
    # source://infra//lib/infra/testing.rb#15
    def included(klass); end

    # source://infra//lib/infra/testing.rb#3
    def with(event_store:, command_bus:); end
  end
end

# source://infra//lib/infra/testing.rb#22
module Infra::TestPlumbing::TestMethods
  # source://infra//lib/infra/testing.rb#29
  def act(command); end

  # source://infra//lib/infra/testing.rb#25
  def arrange(*commands); end

  # source://infra//lib/infra/testing.rb#57
  def assert_changes(actuals, expected); end

  # source://infra//lib/infra/testing.rb#34
  def assert_events(stream_name, *expected_events); end

  # source://infra//lib/infra/testing.rb#45
  def assert_events_contain(stream_name, *expected_events); end

  # Returns the value of attribute command_bus.
  #
  # source://infra//lib/infra/testing.rb#23
  def command_bus; end

  # Returns the value of attribute event_store.
  #
  # source://infra//lib/infra/testing.rb#23
  def event_store; end

  # source://infra//lib/infra/testing.rb#29
  def run_command(command); end
end

# source://infra//lib/infra/types.rb#2
module Infra::Types
  extend ::Dry::Types::BuilderMethods
  extend ::Dry::Core::Deprecations::Interface

  mixes_in_class_methods ::Dry::Types::BuilderMethods
end

# source://infra//lib/infra/types.rb#8
Infra::Types::ID = T.let(T.unsafe(nil), Dry::Types::Constrained)

# source://infra//lib/infra/types.rb#9
Infra::Types::Metadata = T.let(T.unsafe(nil), Dry::Types::Constrained)

# source://infra//lib/infra/types.rb#14
Infra::Types::Price = T.let(T.unsafe(nil), Dry::Types::Constrained::Coercible)

# source://infra//lib/infra/types.rb#13
Infra::Types::Quantity = T.let(T.unsafe(nil), Dry::Types::Constrained)

# source://infra//lib/infra/types.rb#4
Infra::Types::UUID = T.let(T.unsafe(nil), Dry::Types::Constrained)

# source://infra//lib/infra/types.rb#15
Infra::Types::Value = T.let(T.unsafe(nil), Dry::Types::Constructor)
