type Action {
  """
  Data defining the action
  """
  actionData: ActionDataInterface
  actionExecutions: [ActionExecution!]
  actionType: String!
  displayData: ActionDisplayData!
  id: ID!
}

"""
An interface for different action data types
"""
interface ActionDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

type ActionDisplayData {
  description: String
  title: String
}

type ActionExecution {
  """
  Data defining the action
  """
  actionData: ActionDataInterface
  actionId: ID!
  actionType: String!
  completedAt: ISO8601DateTime

  """
  Data provided upon action completion
  """
  completionData: CompletionDataInterface
  id: ID!
  nonce: String!

  """
  Data required to start the action
  """
  startData: StartDataInterface
  startedAt: ISO8601DateTime!
  status: String!
  userId: ID!
}

"""
Autogenerated input type of CompleteActionExecution
"""
input CompleteActionExecutionInput {
  """
  Type of the action
  """
  actionType: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  discourseVerificationCompletionData: DiscourseVerificationCompletionDataInput
  executionId: ID!

  """
  Completion data for Gitcoin Score action
  """
  gitcoinScoreCompletionData: GitcoinScoreCompletionDataInput
  nonce: String!
}

"""
Autogenerated return type of CompleteActionExecution.
"""
type CompleteActionExecutionPayload {
  actionExecution: ActionExecution

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
An interface for different completion data types
"""
interface CompletionDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

"""
Completion data for Discourse verification action
"""
type DiscourseVerificationCompletionData implements CompletionDataInterface {
  """
  Type of the action
  """
  actionType: String!
  discourseUsername: String!
}

"""
Completion data input for Discourse verification action
"""
input DiscourseVerificationCompletionDataInput {
  encryptedKey: String!
}

"""
Start data for Discourse verification action
"""
type DiscourseVerificationStartData implements StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
  verificationUrl: String!
}

type DisplayData {
  content: String
  imageUrl: String
  intro: String
  requirements: String
  title: String
}

"""
Empty action data type for actions that do not require additional data
"""
type EmptyActionCompletionData implements CompletionDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

"""
Empty action data type for actions that do not require additional data
"""
type EmptyActionData implements ActionDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

"""
Empty action data type for actions that do not require additional data
"""
type EmptyActionStartData implements StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

type EnsDomain {
  """
  The name of the domain
  """
  name: String!

  """
  The owner of the domain
  """
  owner: String!

  """
  The resolved address of the domain
  """
  resolvedAddress: String

  """
  The wrapped owner of the domain
  """
  wrappedOwner: String
}

"""
Completion data for ENS action
"""
type EnsStartData implements StartDataInterface {
  """
  Type of the action
  """
  actionType: String!

  """
  List of domains to claim
  """
  domains: [EnsDomain!]!
}

"""
Autogenerated input type of GenerateSiweMessage
"""
input GenerateSiweMessageInput {
  address: String!
  chainId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of GenerateSiweMessage.
"""
type GenerateSiweMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
  nonce: String!
}

"""
Completion data for Gitcoin Score action
"""
type GitcoinScoreCompletionData implements CompletionDataInterface {
  """
  Type of the action
  """
  actionType: String!
  minimumPassingScore: Float
  score: Float
}

"""
Completion data for Gitcoin Score action
"""
input GitcoinScoreCompletionDataInput {
  address: String!
  nonce: String!
  signature: String!
}

"""
Start data for Gitcoin Score action
"""
type GitcoinScoreStartData implements StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
  message: String!
  nonce: String!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Represents untyped JSON
"""
scalar JSON

"""
Autogenerated input type of MarkNotificationAsRead
"""
input MarkNotificationAsReadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deliveryMethod: String = "in_app"
  notificationId: ID!
}

"""
Autogenerated return type of MarkNotificationAsRead.
"""
type MarkNotificationAsReadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  notificationDelivery: NotificationDelivery
}

type Mutation {
  completeActionExecution(
    """
    Parameters for CompleteActionExecution
    """
    input: CompleteActionExecutionInput!
  ): CompleteActionExecutionPayload
  generateSiweMessage(
    """
    Parameters for GenerateSiweMessage
    """
    input: GenerateSiweMessageInput!
  ): GenerateSiweMessagePayload
  markNotificationAsRead(
    """
    Parameters for MarkNotificationAsRead
    """
    input: MarkNotificationAsReadInput!
  ): MarkNotificationAsReadPayload
  signInWithEthereum(
    """
    Parameters for SignInWithEthereum
    """
    input: SignInWithEthereumInput!
  ): SignInWithEthereumPayload
  signOut(
    """
    Parameters for SignOut
    """
    input: SignOutInput!
  ): SignOutPayload
  startActionExecution(
    """
    Parameters for StartActionExecution
    """
    input: StartActionExecutionInput!
  ): StartActionExecutionPayload
}

"""
An object with an ID.
"""
interface Node {
  """
  ID of the object.
  """
  id: ID!
}

type Notification implements Node {
  content: String!
  createdAt: ISO8601DateTime!
  deliveries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): [NotificationDeliveryConnection!]!
  id: ID!
  notificationType: String!
  status: String!
}

"""
The connection type for Notification.
"""
type NotificationConnection {
  """
  A list of edges.
  """
  edges: [NotificationEdge]

  """
  A list of nodes.
  """
  nodes: [Notification]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

type NotificationDelivery implements Node {
  deliveredAt: ISO8601DateTime
  deliveryMethod: String!
  id: ID!
  metadata: JSON
  readAt: ISO8601DateTime
  status: String!
}

"""
The connection type for NotificationDelivery.
"""
type NotificationDeliveryConnection {
  """
  A list of edges.
  """
  edges: [NotificationDeliveryEdge]

  """
  A list of nodes.
  """
  nodes: [NotificationDelivery]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type NotificationDeliveryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: NotificationDelivery
}

"""
An edge in a connection.
"""
type NotificationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Notification
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  currentUser: User
  notifications(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    notificationTypes: [String!] = []
    readStatus: String = "all"
  ): NotificationConnection!
  quest(id: ID!): Quest
  quests: [Quest!]!
  unreadNotificationsCount: Int!
}

type Quest {
  actions: [Action!]!
  audience: String!
  displayData: DisplayData!
  id: ID!
  rewardPools: [RewardPool!]!
  status: String!
  userQuests: [UserQuest!]!
}

"""
Action data for Read Document action
"""
type ReadDocumentActionData implements ActionDataInterface {
  """
  Type of the action
  """
  actionType: String!
  documentUrl: String
}

type RewardDefinition {
  amount: Int!
  type: String!
}

type RewardPool {
  remainingInventory: Int
  rewardDefinition: RewardDefinition!
}

"""
Start data for send email action
"""
type SendEmailStartData implements StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
  email: String
}

"""
Input type for email-related actions
"""
input SendEmailVerificationInput {
  email: String
}

"""
Autogenerated input type of SignInWithEthereum
"""
input SignInWithEthereumInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signature: String!
}

"""
Autogenerated return type of SignInWithEthereum.
"""
type SignInWithEthereumPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of SignOut
"""
input SignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignOut.
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated input type of StartActionExecution
"""
input StartActionExecutionInput {
  actionId: ID!

  """
  Type of the action
  """
  actionType: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  questId: ID!
  sendEmailVerificationInput: SendEmailVerificationInput
}

"""
Autogenerated return type of StartActionExecution.
"""
type StartActionExecutionPayload {
  actionExecution: ActionExecution

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
An interface for different start data types based on action type
"""
interface StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

type User {
  address: String!
  chainId: Int!
  email: String
  id: ID!
  userType: String!
}

type UserQuest {
  completedAt: ISO8601DateTime
  id: ID!
  startedAt: ISO8601DateTime
  status: String!
}
