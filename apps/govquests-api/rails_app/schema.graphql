type Action {
  actionData: ActionData!
  actionExecutions: [ActionExecution!]
  actionType: String!
  displayData: ActionDisplayData!
  id: ID!
}

type ActionData {
  actionType: String
  documentUrl: String
}

type ActionDisplayData {
  description: String
  title: String
}

type ActionExecution {
  actionId: ID!
  actionType: String!
  completedAt: ISO8601DateTime

  """
  Data provided upon action completion
  """
  completionData: CompletionDataInterface
  id: ID!
  nonce: String!

  """
  Data required to start the action
  """
  startData: StartDataInterface
  startedAt: ISO8601DateTime!
  status: String!
  userId: ID!
}

"""
Autogenerated input type of CompleteActionExecution
"""
input CompleteActionExecutionInput {
  """
  Type of the action
  """
  actionType: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  executionId: ID!

  """
  Completion data for Gitcoin Score action
  """
  gitcoinScoreCompletionData: GitcoinScoreCompletionDataInput
  nonce: String!

  """
  Completion data for Read Document action
  """
  readDocumentCompletionData: ReadDocumentCompletionDataInput
}

"""
Autogenerated return type of CompleteActionExecution.
"""
type CompleteActionExecutionPayload {
  actionExecution: ActionExecution

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  passedThreshold: Boolean
  score: Float
}

"""
An interface for different completion data types
"""
interface CompletionDataInterface {
  """
  Type of the action
  """
  actionType: String!
  address: String
  nonce: String
  signature: String
}

type DisplayData {
  content: String
  imageUrl: String
  intro: String
  requirements: String
  title: String
}

"""
Autogenerated input type of GenerateSiweMessage
"""
input GenerateSiweMessageInput {
  address: String!
  chainId: Int!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of GenerateSiweMessage.
"""
type GenerateSiweMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
  nonce: String!
}

"""
Completion data for Gitcoin Score action
"""
type GitcoinScoreCompletionData implements CompletionDataInterface {
  """
  Type of the action
  """
  actionType: String!
  address: String
  nonce: String
  passedThreshold: Boolean!
  score: Float!
  signature: String
  verified: Boolean!
}

"""
Completion data for Gitcoin Score action
"""
input GitcoinScoreCompletionDataInput {
  address: String!
  nonce: String!
  signature: String!
}

"""
Start data for Gitcoin Score action
"""
type GitcoinScoreStartData implements StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
  message: String!
  nonce: String!
}

"""
Start data for Gitcoin Score action
"""
input GitcoinScoreStartDataInput

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

type Mutation {
  completeActionExecution(
    """
    Parameters for CompleteActionExecution
    """
    input: CompleteActionExecutionInput!
  ): CompleteActionExecutionPayload
  generateSiweMessage(
    """
    Parameters for GenerateSiweMessage
    """
    input: GenerateSiweMessageInput!
  ): GenerateSiweMessagePayload
  signInWithEthereum(
    """
    Parameters for SignInWithEthereum
    """
    input: SignInWithEthereumInput!
  ): SignInWithEthereumPayload
  signOut(
    """
    Parameters for SignOut
    """
    input: SignOutInput!
  ): SignOutPayload
  startActionExecution(
    """
    Parameters for StartActionExecution
    """
    input: StartActionExecutionInput!
  ): StartActionExecutionPayload
}

type Query {
  currentUser: User
  quest(id: ID!): Quest
  quests: [Quest!]!
}

type Quest {
  actions: [Action!]!
  audience: String!
  displayData: DisplayData!
  id: ID!
  questType: String!
  rewards: [Reward!]!
  status: String!
  userQuests: [UserQuest!]!
}

"""
Completion data for Read Document action
"""
type ReadDocumentCompletionData implements CompletionDataInterface {
  """
  Type of the action
  """
  actionType: String!
  address: String
  nonce: String
  signature: String
}

"""
Start data for Read Document action
"""
input ReadDocumentCompletionDataInput

"""
Start data for Read Document action
"""
type ReadDocumentStartData implements StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

"""
Start data for Read Document action
"""
input ReadDocumentStartDataInput

type Reward {
  amount: Int!
  type: String!
}

"""
Autogenerated input type of SignInWithEthereum
"""
input SignInWithEthereumInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  signature: String!
}

"""
Autogenerated return type of SignInWithEthereum.
"""
type SignInWithEthereumPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of SignOut
"""
input SignOutInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of SignOut.
"""
type SignOutPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

"""
Autogenerated input type of StartActionExecution
"""
input StartActionExecutionInput {
  actionId: ID!

  """
  Type of the action
  """
  actionType: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  gitcoinScoreStartData: GitcoinScoreStartDataInput
  questId: ID!
  readDocumentStartData: ReadDocumentStartDataInput
}

"""
Autogenerated return type of StartActionExecution.
"""
type StartActionExecutionPayload {
  actionExecution: ActionExecution

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
An interface for different start data types based on action type
"""
interface StartDataInterface {
  """
  Type of the action
  """
  actionType: String!
}

type User {
  address: String!
  chainId: Int!
  email: String
  id: ID!
  userType: String!
}

type UserQuest {
  completedAt: ISO8601DateTime
  id: ID!
  startedAt: ISO8601DateTime
  status: String!
}
